<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>从Paxos到Zookeeper-分布式一致性原理与实践</title>
    <link href="/2023/02/28/%E4%BB%8EPaxos%E5%88%B0Zookeeper-%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%80%E8%87%B4%E6%80%A7%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E8%B7%B5/"/>
    <url>/2023/02/28/%E4%BB%8EPaxos%E5%88%B0Zookeeper-%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%80%E8%87%B4%E6%80%A7%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E8%B7%B5/</url>
    
    <content type="html"><![CDATA[<h2 id="1-分布式特点"><a href="#1-分布式特点" class="headerlink" title="1 分布式特点"></a>1 分布式特点</h2><ul><li>分布性</li><li>对等性</li><li>并发性</li><li>缺乏全局时钟</li><li>故障总会发生</li></ul><h2 id="2-分布式问题"><a href="#2-分布式问题" class="headerlink" title="2 分布式问题"></a>2 分布式问题</h2><ul><li>通信异常</li><li>网络分区</li><li>三态 单体应用中一次请求的结果总是明确的，分布式系统中因为网络是不可靠的，导致成功、失败和超时</li><li>节点故障</li></ul><h2 id="3-单机事务"><a href="#3-单机事务" class="headerlink" title="3 单机事务"></a>3 单机事务</h2><h3 id="ACID"><a href="#ACID" class="headerlink" title="ACID"></a>ACID</h3><p>A&#x3D;Atomicity 原子性</p><p>C&#x3D;Consistency 一致性</p><p>I&#x3D;Isolation 隔离性</p><p>D&#x3D;Durability 持久性</p><h2 id="4-分布式理论"><a href="#4-分布式理论" class="headerlink" title="4 分布式理论"></a>4 分布式理论</h2><h3 id="4-1-CAP"><a href="#4-1-CAP" class="headerlink" title="4.1 CAP"></a>4.1 CAP</h3><p>C&#x3D;Consistency 一致性</p><p>A&#x3D;可用性</p><p>P&#x3D;分区容错性</p><p>分区容错性约束了一个分布式系统在遇到任何网络分区故障的时候，都要能够保证对外提供满足一致性和可用性的服务，除非是整个网络都发生故障</p><h3 id="4-2-BASE"><a href="#4-2-BASE" class="headerlink" title="4.2 BASE"></a>4.2 BASE</h3><p>BA&#x3D;Basically Available 基本可用</p><p>S&#x3D;Soft State 软状态</p><p>E&#x3D;Eventually consistent 最终一致性</p><h3 id="4-3-最终一致性变种"><a href="#4-3-最终一致性变种" class="headerlink" title="4.3 最终一致性变种"></a>4.3 最终一致性变种</h3><p>因果一致性</p><p>读己之所写</p><p>会话一致性</p><p>单调读一致性</p><p>单调写一致性</p><h2 id="5-一致性协议"><a href="#5-一致性协议" class="headerlink" title="5 一致性协议"></a>5 一致性协议</h2><h3 id="5-1-2PC"><a href="#5-1-2PC" class="headerlink" title="5.1 2PC"></a>5.1 2PC</h3><h4 id="5-1-1-角色"><a href="#5-1-1-角色" class="headerlink" title="5.1.1 角色"></a>5.1.1 角色</h4><p>协调者 统一调度所有分布式节点的执行逻辑</p><p>参与者 执行节点</p><h4 id="5-1-2-阶段"><a href="#5-1-2-阶段" class="headerlink" title="5.1.2 阶段"></a>5.1.2 阶段</h4><h5 id="阶段一-提交事务请求"><a href="#阶段一-提交事务请求" class="headerlink" title="阶段一 提交事务请求"></a>阶段一 提交事务请求</h5><ol><li>事务询问 协调者向参与者询问是否可以执行事务</li><li>执行事务 参与者执行事务，记录Undo和Redo日志信息</li><li>反馈响应 参与者反馈Ack，可以执行事务返回Yes，不可以执行事务返回No</li></ol><h5 id="阶段二-执行事务提交"><a href="#阶段二-执行事务提交" class="headerlink" title="阶段二 执行事务提交"></a>阶段二 执行事务提交</h5><p>协调者根据Ack决策</p><ol><li>提交事务 所有参与者都回复Yes表示可以执行事务<ol><li>协调者告诉参与者进行Commit</li><li>参与者提交事务，释放独占的资源</li><li>参与者向协调者Ack</li><li>协调者收到所有Ack 整个分布式事务结束</li></ol></li><li>回滚事务 但凡有一个参与者回复No<ol><li>协调者向参与者发送Rollback请求</li><li>参与者执行回滚，释放独占的资源</li><li>参与者回复协调者Ack</li><li>协调者收到所有参与者Ack后 整个分布式事务宣告结束</li></ol></li></ol><h4 id="5-1-3-两阶段协议问题"><a href="#5-1-3-两阶段协议问题" class="headerlink" title="5.1.3 两阶段协议问题"></a>5.1.3 两阶段协议问题</h4><ul><li>同步阻塞</li><li>单点问题 极度依赖协调者</li><li>数据不一致 第二阶段时，协调者向参与者发送提交请求时，发送一半出现网络问题，导致有的参与者提交了事务，有的参与者没有提交事务</li><li>过于保守 没有设计完善的容错机制，任意一个节点的失败都会导致整个事务的失败</li></ul><h3 id="5-2-3PC"><a href="#5-2-3PC" class="headerlink" title="5.2 3PC"></a>5.2 3PC</h3><h4 id="5-2-1-角色"><a href="#5-2-1-角色" class="headerlink" title="5.2.1 角色"></a>5.2.1 角色</h4><p>协调者 统一调度所有分布式节点的执行逻辑</p><p>参与者 执行节点</p><h4 id="5-2-2-阶段"><a href="#5-2-2-阶段" class="headerlink" title="5.2.2 阶段"></a>5.2.2 阶段</h4><h5 id="阶段一-CanCommit"><a href="#阶段一-CanCommit" class="headerlink" title="阶段一 CanCommit"></a>阶段一 CanCommit</h5><h5 id="阶段二-PreCommit"><a href="#阶段二-PreCommit" class="headerlink" title="阶段二 PreCommit"></a>阶段二 PreCommit</h5><h5 id="阶段三-doCommit"><a href="#阶段三-doCommit" class="headerlink" title="阶段三 doCommit"></a>阶段三 doCommit</h5><h4 id="5-2-3-三阶段提交的问题"><a href="#5-2-3-三阶段提交的问题" class="headerlink" title="5.2.3 三阶段提交的问题"></a>5.2.3 三阶段提交的问题</h4><p>参与者接收到preCommit消息后，如果网络出现分区，此时协调者所在的节点和参与者无法进行网络通信，在这种情况下，该参与者依然会进行事物的提交，导致数据不一致</p><h2 id="6-Paxios算法"><a href="#6-Paxios算法" class="headerlink" title="6 Paxios算法"></a>6 Paxios算法</h2><p>基于消息传递且具有高度容错特性的一致性算法</p><p>引入<code>过半</code>理念和支持分布式节点角色转换，避免了分布式单点问题，也解决了无限期待问题</p><h3 id="6-1-一致性安全需求"><a href="#6-1-一致性安全需求" class="headerlink" title="6.1 一致性安全需求"></a>6.1 一致性安全需求</h3><ul><li>只有被剔除的提案才能被选定</li><li>只有一个值被选定</li><li>如果某个进程认为某个提案被选定了，那么这个提案必须是真的被选定的那个</li></ul><h3 id="6-2-目标"><a href="#6-2-目标" class="headerlink" title="6.2 目标"></a>6.2 目标</h3><p>保证最终有一个提案会被选定，当提案被选定之后，进程最终也能获取到被选定的提案</p><h3 id="6-3-角色"><a href="#6-3-角色" class="headerlink" title="6.3 角色"></a>6.3 角色</h3><ul><li>Proposer</li><li>Acceptor</li><li>Learner</li></ul><h3 id="6-4-过程"><a href="#6-4-过程" class="headerlink" title="6.4 过程"></a>6.4 过程</h3><h4 id="6-4-1-提案的选定"><a href="#6-4-1-提案的选定" class="headerlink" title="6.4.1 提案的选定"></a>6.4.1 提案的选定</h4><p>Poposer向一个Acceptor集合发送提案</p><p>足够多的Acceptor是整个Acceptor集合的一个子集，并且让这个集合大的可以包含Acceptor集合中的大多数成员</p><p>提案由一个编号和Value的组成的组合体，[编号, Value]</p><h4 id="6-4-2-Proposer生成提案"><a href="#6-4-2-Proposer生成提案" class="headerlink" title="6.4.2 Proposer生成提案"></a>6.4.2 Proposer生成提案</h4><p>Proposer在产生一个编号为M<sub>n</sub>的提案时，必须要知道某一个将要活着已经被半数以上Acceptor批准的编号小于M<sub>n</sub>但为最大编号的提案，并且Proposer会要求所有的Acceptor都不要再批准任何编号小于M<sub>n</sub>的提案</p><h4 id="6-4-3-Acceptor批准提案"><a href="#6-4-3-Acceptor批准提案" class="headerlink" title="6.4.3 Acceptor批准提案"></a>6.4.3 Acceptor批准提案</h4><p>一个Acceptor可能会收到来自Proposer的两种请求，分别是Prepare请求和Accept请求</p><ul><li>Prepare请求 Acceptor可以在任何时候响应一个Prepare请求</li><li>Accept请求 在不违背Accept现有承诺的前提下，可以任意响应Accept请求</li></ul><h3 id="6-5-算法"><a href="#6-5-算法" class="headerlink" title="6.5 算法"></a>6.5 算法</h3><h4 id="6-5-1-Proposer和Acceptor提案选定"><a href="#6-5-1-Proposer和Acceptor提案选定" class="headerlink" title="6.5.1 Proposer和Acceptor提案选定"></a>6.5.1 Proposer和Acceptor提案选定</h4><h5 id="阶段一"><a href="#阶段一" class="headerlink" title="阶段一"></a>阶段一</h5><p>1 Proposer选择一个提案编号M<sub>n</sub>，然后向Acceptor的某个超过半数的子集发送编号为M<sub>n</sub>的Prepare请求</p><p>2 如果一个Acceptor收到一个编号为M<sub>n</sub>的Prepare请求，且编号M<sub>n</sub>大于该Acceptor已经响应过的所有Prepare请求的编号，那么它就会将已经批准过的最大编号作为响应反馈给Proposer，同时该Acceptor会承诺不会再批准任何编号小于M<sub>n</sub>的提案</p><h5 id="阶段二"><a href="#阶段二" class="headerlink" title="阶段二"></a>阶段二</h5><p>1 如果Proposer收到来自半数以上的Acceptor对于其发出的编号为M<sub>n</sub>的Prepare请求的响应，那么它就会发送一个针对[M<sub>n</sub>,V<sub>n</sub>]提案的Accept请求给Acceptor</p><p>2 如果Acceptor收到针对这个[M<sub>n</sub>,V<sub>n</sub>]提案的Accept请求，只要该Acceptor尚未对编号大于M<sub>n</sub>的Prepare请求作出响应，就会通过这个提案</p><h4 id="6-5-2-Learner获取提案"><a href="#6-5-2-Learner获取提案" class="headerlink" title="6.5.2 Learner获取提案"></a>6.5.2 Learner获取提案</h4><h4 id="6-5-3-选取主Proposer保证算法活性"><a href="#6-5-3-选取主Proposer保证算法活性" class="headerlink" title="6.5.3 选取主Proposer保证算法活性"></a>6.5.3 选取主Proposer保证算法活性</h4><h2 id="7-zk"><a href="#7-zk" class="headerlink" title="7 zk"></a>7 zk</h2><h3 id="7-1-集群角色"><a href="#7-1-集群角色" class="headerlink" title="7.1 集群角色"></a>7.1 集群角色</h3><ul><li>Leader</li><li>Follower</li><li>Observer</li></ul><h3 id="7-2-数据结构"><a href="#7-2-数据结构" class="headerlink" title="7.2 数据结构"></a>7.2 数据结构</h3><p>ZNode</p><ul><li>持久节点 除非主动移除，否则一直保存在zk上</li><li>临时节点 生命周期跟客户端会话绑定</li></ul><p>SEQUENTIAL属性 zk允许用户为每个节点添加属性，一旦节点被标记上这个属性，那么在这个节点被创建的时候，zk会自动在其节点后面追加上一个整型数字(由父节点维护的自增数字)</p><h3 id="7-3-版本"><a href="#7-3-版本" class="headerlink" title="7.3 版本"></a>7.3 版本</h3><p>对于每个ZNode，zk都会维护一个Stat的数据结构</p><p>Stat中记录了这个ZNode的3个数据版本</p><ul><li>version 当前ZNode的版本</li><li>cversion 当前ZNode子节点的版本</li><li>aversion 当前ZNode的ACL版本</li></ul><h3 id="7-4-ZAB协议"><a href="#7-4-ZAB协议" class="headerlink" title="7.4 ZAB协议"></a>7.4 ZAB协议</h3><p>ZooKeeper Atomic Broadcast zk原子广播协议，数据一致性的核心算法</p><p>支持崩溃恢复的原子广播协议</p><p>zk使用一个单一的主进程接收并处理客户端的所有事务请求，采用ZAB的原子广播协议，将服务器数据的变更以事务Proposal的形式广播到所有的副本进程上</p><p>ZAB协议的这个主备模型架构保证了同一时刻集群中只能有一个主进程来广播服务器的状态变更，因此能够很好地处理客户端大量的并发请求</p><p>ZAB协议的核心是定义了对于那些会改变zk服务器数据状态的事务请求的处理方式</p><ul><li>所有事务请求必须由一个全局唯一的服务器来协调处理，即Leader</li><li>Leader服务器负责将一个客户端事务请求转为一个事务Proposal提议，并将该Proposal分发给集群中所有的follower服务器</li><li>Leader服务器等待所有Follower服务器的反馈，收到半数后Leader就会再次向所有Follower服务器分发Commit消息，要求将Proposal进行提交</li></ul><p>ZAB协议包括两种基本模式</p><ul><li>崩溃恢复<ul><li>整个服务框架启动或者Lader出现网络中断、崩溃退出与重启等异常情况时，ZAB协议就会进入恢复模式并选举产生新的Leader</li><li>当选举产生了新的Leader，同步集群中过半机器与Leader完成了同步之后ZAB就会退出恢复模式</li></ul></li><li>消息广播<ul><li>集群中已经过半的Follower完成了和Leader的状态同步，那么整个服务框架就可以进入消息广播模式了</li><li>当一台同样遵守ZAB协议的服务器启动后加入到集群时，如果此时集群中已经存在了一个Leader在负责进行消息广播，那么新加入的服务器会自觉加入数据恢复模式<ul><li>找到Leader所在的服务器，并与其进行数据同步</li><li>然后一起参与到消息广播流程中</li></ul></li></ul></li></ul><p>ZAB协议的事务编号ZXID设计中，64位</p><ul><li>高32位 代表了Leader周期epoch的编号，每当选举产生一个新的Leader服务器，就会从这个服务器上本地日志中最大事务Proposal的ZXID中解析出对应的epoch值加1</li><li>低32位 单调递增的计数器，针对客户端的每一个事务请求，Leader服务器在产生一个的新的事务Proposal的时候都会对该计数器进行加1操作</li></ul><h4 id="7-4-1-过程"><a href="#7-4-1-过程" class="headerlink" title="7.4.1 过程"></a>7.4.1 过程</h4><ul><li>崩溃恢复</li><li>消息广播</li></ul><h4 id="7-4-2-阶段"><a href="#7-4-2-阶段" class="headerlink" title="7.4.2 阶段"></a>7.4.2 阶段</h4><ul><li>发现 Leader选举过程</li><li>同步</li><li>广播 ZAB协议正式开始接收客户端新的事务请求，并进行消息广播流程</li></ul><h4 id="7-4-3-状态"><a href="#7-4-3-状态" class="headerlink" title="7.4.3 状态"></a>7.4.3 状态</h4><ul><li>Looking Leader选举阶段</li><li>Following Follower服务器和Leader服务器保持同步状态</li><li>Leading Leader服务器作为主进程领导状态</li></ul><h2 id="8-ZAB-vs-Paxos"><a href="#8-ZAB-vs-Paxos" class="headerlink" title="8 ZAB vs Paxos"></a>8 ZAB vs Paxos</h2><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><p>设计目标不一样</p><ul><li>ZAB协议主要用于构建一个高可用的分布式数据主备系统</li><li>Paxos算法用于构建一个分布式的一致性状态机系统</li></ul><h3 id="5-6-zk典型应用场景"><a href="#5-6-zk典型应用场景" class="headerlink" title="5.6 zk典型应用场景"></a>5.6 zk典型应用场景</h3><ul><li>数据发布&#x2F;订阅</li><li>负载均衡</li><li>命名服务</li><li>分布式协调&#x2F;通知</li><li>集群管理</li><li>Master选举</li><li>分布式锁</li><li>分布式队列</li></ul>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>分布式</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
